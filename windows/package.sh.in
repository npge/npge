#!/bin/bash

rm -fr npge-${VERSION}
mkdir npge-${VERSION}

BLASTVER=2.2.30

# This script needs NPGEARCH and BLASTARCH vars
# NPGEARCH: 32, 64
# BLASTARCH: ia32, x64

BLASTSERVER=ftp.ncbi.nlm.nih.gov
BLASTPATH=blast/executables/blast+/
BLASTTAR=ncbi-blast-$BLASTVER+-$BLASTARCH-win$NPGEARCH.tar.gz
BLASTURL=http://$BLASTSERVER/$BLASTPATH/$BLASTVER/$BLASTTAR

wget -N $BLASTURL
tar -xf $BLASTTAR

cp ncbi-blast-$BLASTVER+/bin/makeblastdb.exe npge-${VERSION}/
cp ncbi-blast-$BLASTVER+/bin/blastn.exe npge-${VERSION}/

curl -o npge-${VERSION}/vcomp100.dll \
    http://drive5.com/usearch/vcomp100.dll

cd npge-${VERSION}
check_sha1=${CMAKE_CURRENT_SOURCE_DIR}/check-$BLASTARCH.sha1
if ! ( sha1sum --check $check_sha1 ) then
    echo 'Checksums of binaries do not match' $check_sha1
    exit
fi
cd ..

cp ncbi-blast-$BLASTVER+/bin/makeblastdb.exe \
    ${PROJECT_BINARY_DIR}/src/test/
cp ncbi-blast-$BLASTVER+/bin/blastn.exe \
    ${PROJECT_BINARY_DIR}/src/test/
chmod +x ${PROJECT_BINARY_DIR}/src/test/*.exe
cp npge-${VERSION}/vcomp100.dll \
    ${PROJECT_BINARY_DIR}/src/test/
prevpath=`pwd`

if [ $NPGEARCH = '32' ] ; then
    if [ -z "$NOWINE" ]; then
        cd ${PROJECT_BINARY_DIR}
        if ! ( make test ) then
            echo 'make test failed! Aborted'
            exit
        fi
        cd $prevpath
    fi
fi

awk 'sub("$", "\r")' ${PROJECT_SOURCE_DIR}/README.md > \
    npge-${VERSION}/README.txt

awk 'sub("$", "\r")' \
    ${PROJECT_SOURCE_DIR}/examples/Brucella/5genomes.tsv > \
    npge-${VERSION}/genomes.tsv

cp ${PROJECT_BINARY_DIR}/src/tool/npge.exe \
    ${PROJECT_BINARY_DIR}/src/gui/qnpge.exe \
    npge-${VERSION}

strip npge-${VERSION}/*.exe
if [ $NPGEARCH = '32' ] ; then
    # see https://github.com/npge/npge/issues/7
    upx -9 npge-${VERSION}/*.exe
fi

chmod +x npge-${VERSION}/*.exe

pandoc ${PROJECT_SOURCE_DIR}/README.md \
    ${PANDOC_OPTS} > npge-${VERSION}/README.html
pandoc ${PROJECT_SOURCE_DIR}/doc/API.md \
    ${PANDOC_OPTS} > npge-${VERSION}/API.html

cat ${PROJECT_SOURCE_DIR}/LICENSE \
    ${PROJECT_SOURCE_DIR}/gpl2.txt \
    ${PROJECT_SOURCE_DIR}/gpl3.txt | awk 'sub("$", "\r")' \
    > npge-${VERSION}/LICENSE.txt

awk 'sub("$", "\r")' \
    < ${PROJECT_SOURCE_DIR}/AUTHORS \
    > npge-${VERSION}/AUTHORS.txt

cp ${PROJECT_SOURCE_DIR}/npge.ico npge-${VERSION}

if [ $NPGEARCH = '32' ] ; then
    if [ -z "$NOWINE" ]; then
        NPGE_TOOL="wine ${PROJECT_BINARY_DIR}/src/tool/npge.exe"
    else
        # build Linux npge to build these files
        cd ${PROJECT_BINARY_DIR}../
        ./linux/build.sh
        NPGE_TOOL=`pwd`/npge-build-linux/src/tool/npge
        cd $prevpath
    fi
    $NPGE_TOOL AllProcessors \
        --out npge-${VERSION}/AllProcessors.html
    $NPGE_TOOL AllOptions \
        --out npge-${VERSION}/AllOptions.html
    $NPGE_TOOL -g \
        > npge-${VERSION}/npge.conf
else
    cp ../npge-build-windows32/npge-${VERSION}/AllProcessors.html \
        npge-${VERSION}
    cp ../npge-build-windows32/npge-${VERSION}/AllOptions.html \
        npge-${VERSION}
    cp ../npge-build-windows32/npge-${VERSION}/npge.conf \
        npge-${VERSION}
fi

zip -r npge_${VERSION}_win$NPGEARCH.zip npge-${VERSION}

# NSIS

MAKENSIS=/usr/lib/mxe/usr/bin/i686-w64-mingw32.static-makensis

cp ${CMAKE_CURRENT_BINARY_DIR}/wizard.nsi npge-${VERSION}
cd npge-${VERSION}
$MAKENSIS wizard.nsi
mv npge_${VERSION}_win32.exe ../npge_${VERSION}_win$NPGEARCH.exe
cd ..
