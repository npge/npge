/*
 * NPG-explorer, Nucleotide PanGenome explorer
 * Copyright (C) 2014 Boris Nagaev
 *
 * See the LICENSE file for terms of use.
 */

#include <boost/algorithm/string/replace.hpp>

#include "opts_lib.hpp"
#include "throw_assert.hpp"
#include "Meta.hpp"
#include "Decimal.hpp"
#include "name_to_stream.hpp"

namespace npge {

static std::string local_conf_("${LOCAL_CONF}");

void set_local_conf(const std::string& conf) {
    local_conf_ = conf;
}

static AnyAs local_conf() {
    return local_conf_;
}

static std::string find_tool(const std::string& tool) {
    std::string app_dir = get_app_dir();
    std::string app_tool = cat_paths(app_dir, tool);
    if (file_exists(app_tool)) {
        return escape_path(app_tool);
    }
    std::string app_tool_exe = app_tool + ".exe";
    if (file_exists(app_tool_exe)) {
        return escape_path(app_tool_exe);
    }
    std::string app_tool_EXE = app_tool + ".EXE";
    if (file_exists(app_tool_EXE)) {
        return escape_path(app_tool_EXE);
    }
    std::string app_tool_bat = app_tool + ".bat";
    if (file_exists(app_tool_bat)) {
        return escape_path(app_tool_bat);
    }
    std::string app_tool_BAT = app_tool + ".BAT";
    if (file_exists(app_tool_BAT)) {
        return escape_path(app_tool_BAT);
    }
    return tool;
}

static int get_ALIGNER_MAX_ERRORS(const Meta* meta) {
    int batch = meta->get_opt("EXPANDER_BATCH").as<int>();
    Decimal min_identity;
    min_identity = meta->get_opt("MIN_IDENTITY").as<Decimal>();
    return ((D(1.0) - min_identity) * batch).to_i() + 1;
}

std::string make_external_cmd(const Meta* meta,
                              const std::string& name) {
    std::string tmp = meta->get_opt(name + "_CMD").to_s();
    std::string exe = meta->get_opt(name + "_EXE").to_s();
    using namespace boost::algorithm;
    return replace_first_copy(tmp, "{" + name + "}", exe);
}

void add_opts(Meta* meta) {
    meta->set_opt("LOG_TO", std::string("${LOG_TO}"),
                  "Where to write log messages "
                  "(':stdout', ':stderr' or file path)");
    meta->set_section("LOG_TO", "util");
    meta->set_opt("DEV_NULL", std::string("${DEV_NULL}"),
                  "Null device");
    meta->set_section("DEV_NULL", "util");
    meta->set_opt("WORKERS", int(${WORKERS}),
                  "Number of threads "
                  "(-1 = number of processor cores)");
    meta->set_section("WORKERS", "concurrency");
    meta->set_opt("BLOCKS_IN_GROUP", int(${BLOCKS_IN_GROUP}),
                  "Number of blocks processed by one core "
                  "by parallel computing");
    meta->set_section("BLOCKS_IN_GROUP", "concurrency");
    meta->set_opt("TIMING", bool(${TIMING}),
                  "Log begin/end of calls and "
                  "final time summary");
    meta->set_section("TIMING", "util");
    meta->set_opt("NPGE_DEBUG", bool(${NPGE_DEBUG}),
                  "Debug mode");
    meta->set_section("NPGE_DEBUG", "util");
    meta->set_opt("MIN_LENGTH", int(${MIN_LENGTH}),
                  "Minimum acceptable length of fragment "
                  "(b.p.)");
    meta->set_section("MIN_LENGTH", "main");
    meta->set_opt("MIN_IDENTITY", D(${MIN_IDENTITY}),
                  "Minimum acceptable identity of block "
                  "(0.9 is 90%)");
    meta->set_section("MIN_IDENTITY", "main");
    meta->set_opt("ANCHOR_SIZE", int(${ANCHOR_SIZE}),
                  "Anchor size (b.p.)");
    meta->set_section("ANCHOR_SIZE", "anchor");
    meta->set_opt("ANCHOR_FP", D(${ANCHOR_FP}),
                  "Probability of false positive in "
                  "Bloom filter, see "
                  "https://en.wikipedia.org/wiki/Bloom_filter");
    meta->set_section("ANCHOR_FP", "anchor");
    meta->set_opt("MAX_ANCHOR_FRAGMENTS",
                  int(${MAX_ANCHOR_FRAGMENTS}),
                  "Stop finding new anchors when total "
                  "number of fragments of all anchors "
                  "exceeds this value");
    meta->set_section("MAX_ANCHOR_FRAGMENTS", "anchor");
    meta->set_opt("ALIGNER",
                  std::string("${ALIGNER}"),
                  "Aligner implementation "
                  "(similar, mafft, muscle)");
    meta->set_section("ALIGNER", "main");
    meta->set_opt("ALIGNER_MAX_ERRORS", 11,
                  "Max number of errors in blockset alignment");
    meta->set_section("ALIGNER_MAX_ERRORS",
                      "blockset aligner");
    meta->set_opt("ALIGNER_GAP_RANGE",
                  int(${ALIGNER_GAP_RANGE}),
                  "Max distance from main diagonal "
                  "of considered states of pair alignment");
    meta->set_section("ALIGNER_GAP_RANGE", "blockset aligner");
    meta->set_opt("ALIGNER_GAP_PENALTY",
                  int(${ALIGNER_GAP_PENALTY}),
                  "Gap penalty for aligner");
    meta->set_section("ALIGNER_GAP_PENALTY",
                      "blockset aligner");
    meta->set_opt("ALIGNER_MISMATCH_PENALTY",
                  int(${ALIGNER_MISMATCH_PENALTY}),
                  "Mismatch penalty for aligner");
    meta->set_section("ALIGNER_MISMATCH_PENALTY",
                      "blockset aligner");
    meta->set_opt("SPLIT_REPEATS_MIN_MUTATIONS",
                  int(${SPLIT_REPEATS_MIN_MUTATIONS}),
                  "Min number of mutations in candidate "
                  "block to be splited");
    meta->set_section("SPLIT_REPEATS_MIN_MUTATIONS", "split");
    meta->set_opt("SPLIT_REPEATS_MIN_DIAGNOSTIC_MUTATIONS",
                  int(${SPLIT_REPEATS_MIN_DIAGNOSTIC_MUTATIONS}),
                  "Min number of diagnostic mutations "
                  "in part of splitted block");
    meta->set_section("SPLIT_REPEATS_MIN_DIAGNOSTIC_MUTATIONS",
                      "split");
    meta->set_opt("MISMATCH_CHECK", int(${MISMATCH_CHECK}),
                  "Min number of equal columns "
                  "after single mismatch");
    meta->set_section("MISMATCH_CHECK", "similar aligner");
    meta->set_opt("GAP_CHECK", int(${GAP_CHECK}),
                  "Min number of equal columns "
                  "after single gap");
    meta->set_section("GAP_CHECK", "similar aligner");
    meta->set_opt("ALIGNED_CHECK", int(${ALIGNED_CHECK}),
                  "Min equal aligned part");
    meta->set_section("ALIGNED_CHECK", "similar aligner");
    meta->set_opt("BLAST_EVALUE", D(${BLAST_EVALUE}),
                  "E-value filter for blast");
    meta->set_section("BLAST_EVALUE", "blast");
    meta->set_opt("BLAST_DUST", bool(${BLAST_DUST}),
                  "Filter out low complexity regions");
    meta->set_section("BLAST_DUST", "blast");
    meta->set_opt("MAX_TAIL", int(${MAX_TAIL}),
                  "Max number of end letters prior first gap "
                  "that are moved onto gap");
    meta->set_section("MAX_TAIL", "main");
    meta->set_opt("MAX_TAIL_TO_GAP", D(${MAX_TAIL_TO_GAP}),
                  "Max ratio of number of end letters "
                  "prior first gap that are moved onto gap");
    meta->set_section("MAX_TAIL_TO_GAP", "main");
    meta->set_opt("MAX_MATCHES", int(${MAX_MATCHES}),
                  "Maximum number of matches (FragmentFinder)");
    meta->set_section("MAX_MATCHES", "ui");
    //
    meta->set_opt("CONFIG0", std::string("${CONFIG0}"),
                  "Config file 0");
    meta->set_section("CONFIG0", "config");
    meta->set_opt("CONFIG1", std::string("${CONFIG1}"),
                  "Config file 1");
    meta->set_section("CONFIG1", "config");
    meta->set_opt("CONFIG2", std::string("${CONFIG2}"),
                  "Config file 2");
    meta->set_section("CONFIG2", "config");
    meta->set_opt("CONFIG3", std::string("${CONFIG3}"),
                  "Config file 3");
    meta->set_section("CONFIG3", "config");
    meta->set_opt("CONFIG4", std::string("${CONFIG4}"),
                  "Config file 4");
    meta->set_section("CONFIG4", "config");
    meta->set_opt("CONFIG5", std::string("${CONFIG5}"),
                  "Config file 5");
    meta->set_section("CONFIG5", "config");
    meta->set_opt("CONFIG6", std::string("${CONFIG6}"),
                  "Config file 6");
    meta->set_section("CONFIG6", "config");
    meta->set_opt("CONFIG7", std::string("${CONFIG7}"),
                  "Config file 7");
    meta->set_section("CONFIG7", "config");
    meta->set_opt("CONFIG8", std::string("${CONFIG8}"),
                  "Config file 8");
    meta->set_section("CONFIG8", "config");
    meta->set_opt("CONFIG9", std::string("${CONFIG9}"),
                  "Config file 9");
    meta->set_section("CONFIG9", "config");
    meta->set_opt_func("LOCAL_CONF", &local_conf);
    meta->set_description("LOCAL_CONF",
                          "Local config file name");
    meta->set_section("LOCAL_CONF", "config");
    //
    meta->set_opt("MAFFT_CMD", std::string("${MAFFT_CMD}"),
                  "Mafft command template");
    meta->set_section("MAFFT_CMD", "config");
    meta->set_opt("MUSCLE_CMD", std::string("${MUSCLE_CMD}"),
                  "Muscle command template");
    meta->set_section("MUSCLE_CMD", "config");
    meta->set_opt("MAFFT_EXE", find_tool("mafft"),
                  "Mafft executable");
    meta->set_section("MAFFT_EXE", "config");
    meta->set_opt("MUSCLE_EXE", find_tool("muscle"),
                  "Muscle executable");
    meta->set_section("MUSCLE_EXE", "config");
    //
    std::string formatdb_exe = find_tool("formatdb");
    std::string blastall_exe = find_tool("blastall");
    std::string makeblastdb_exe = find_tool("makeblastdb");
    std::string blastn_exe = find_tool("blastn");
    meta->set_opt("FORMATDB_EXE", formatdb_exe,
                  "formatdb executable (legacy blast)");
    meta->set_section("FORMATDB_EXE", "config");
    meta->set_opt("BLASTALL_EXE", blastall_exe,
                  "blastall executable (legacy blast)");
    meta->set_section("BLASTALL_EXE", "config");
    meta->set_opt("MAKEBLASTDB_EXE", makeblastdb_exe,
                  "makeblastdb executable (blast+)");
    meta->set_section("MAKEBLASTDB_EXE", "config");
    meta->set_opt("BLASTN_EXE", blastn_exe,
                  "blastn executable (blast+)");
    meta->set_section("BLASTN_EXE", "config");
    meta->set_opt("FORMATDB_CMD",
                  std::string("${FORMATDB_CMD}"),
                  "formatdb command template (legacy blast)");
    meta->set_section("FORMATDB_CMD", "config");
    meta->set_opt("MAKEBLASTDB_CMD",
                  std::string("${MAKEBLASTDB_CMD}"),
                  "makeblastdb command template (blast+)");
    meta->set_section("MAKEBLASTDB_CMD", "config");
    meta->set_opt("BLASTALL_CMD",
                  std::string("${BLASTALL_CMD}"),
                  "blastall command template (legacy blast)");
    meta->set_section("BLASTALL_CMD", "config");
    meta->set_opt("BLASTN_CMD",
                  std::string("${BLASTN_CMD}"),
                  "blastn command template (blast+)");
    meta->set_section("BLASTN_CMD", "config");
    bool formatdb = formatdb_exe != "formatdb";
    bool makeblastdb = makeblastdb_exe != "makeblastdb";
    bool blastall = blastall_exe != "blastall";
    bool blastn = blastn_exe != "blastn";
    bool blast_legacy = formatdb && blastall;
    bool blast_plus = makeblastdb && blastn;
    bool blast_default = blast_legacy == blast_plus;
    bool BLAST_PLUS = bool(${BLAST_PLUS});
    if (!blast_default && blast_legacy) {
        BLAST_PLUS = 0;
    }
    if (!blast_default && blast_plus) {
        BLAST_PLUS = 1;
    }
    meta->set_opt("BLAST_PLUS", BLAST_PLUS,
                  "Use blast+ instead of blast legacy");
    meta->set_section("BLAST_PLUS", "config");
}

}

