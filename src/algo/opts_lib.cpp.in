/*
 * NPG-explorer, Nucleotide PanGenome explorer
 * Copyright (C) 2014 Boris Nagaev
 *
 * See the LICENSE file for terms of use.
 */

#include "opts_lib.hpp"
#include "throw_assert.hpp"
#include "Meta.hpp"

namespace npge {

static int get_max_errors(const Meta* meta) {
    int batch = meta->get_opt("EXPANDER_BATCH").as<int>();
    double min_identity = meta->get_opt("MIN_IDENTITY").as<double>();
    return batch * (1.0 - min_identity) + 1;
}

void add_opts(Meta* meta) {
    meta->set_opt("LOG_TO", std::string("${LOG_TO}"));
    meta->set_opt("WORKERS", int(${WORKERS}));
    meta->set_opt("TIMING", bool(${TIMING}));
    meta->set_opt("MIN_LENGTH", int(${MIN_LENGTH}));
    meta->set_opt("MIN_IDENTITY", double(${MIN_IDENTITY}));
    meta->set_opt("MAX_EVALUE", double(${MAX_EVALUE}));
    meta->set_opt("MAX_SPREADING", double(${MAX_SPREADING}));
    meta->set_opt("MAX_GAPS", double(${MAX_GAPS}));
    meta->set_opt("EXPANDER_BATCH", int(${EXPANDER_BATCH}));
    meta->set_opt("EXPANDER_MAX_OVERLAP",
                  int(${EXPANDER_MAX_OVERLAP}));
    meta->set_opt("META_ALIGNER",
                  std::string("${META_ALIGNER}"));
    meta->set_opt("MAFFT_CMD", std::string("${MAFFT_CMD}"));
    meta->set_opt("MUSCLE_CMD", std::string("${MUSCLE_CMD}"));
    meta->set_opt("EXTERNAL_ALIGNER_CMD",
                  std::string("${EXTERNAL_ALIGNER_CMD}"));
    meta->set_opt_func("ALIGNER_MAX_ERRORS",
                       boost::bind(get_max_errors, meta));
    meta->set_opt("ALIGNER_GAP_RANGE", int(${ALIGNER_GAP_RANGE}));
    meta->set_opt("ALIGNER_GAP_PENALTY", int(${ALIGNER_GAP_PENALTY}));
    meta->set_opt("ALIGNER_MISMATCH_PENALTY",
                  int(${ALIGNER_MISMATCH_PENALTY}));
    meta->set_opt("BOUNDARIES_MIN_DISTANCE",
                  int(${BOUNDARIES_MIN_DISTANCE}));
    meta->set_opt("JOINER_MAX_DIST", int(${JOINER_MAX_DIST}));
    meta->set_opt("JOINER_RATIO_TO_FRAGMENT",
                  double(${JOINER_RATIO_TO_FRAGMENT}));
    meta->set_opt("JOINER_GAP_RATIO", double(${JOINER_GAP_RATIO}));
    meta->set_opt("SPLIT_REPEATS_MIN_MUTATIONS",
                  int(${SPLIT_REPEATS_MIN_MUTATIONS}));
    meta->set_opt("SPLIT_REPEATS_MIN_DIAGNOSTIC_MUTATIONS",
                  int(${SPLIT_REPEATS_MIN_DIAGNOSTIC_MUTATIONS}));
    meta->set_opt("MISMATCH_CHECK", int(${MISMATCH_CHECK}));
    meta->set_opt("GAP_CHECK", int(${GAP_CHECK}));
    meta->set_opt("ALIGNED_CHECK", int(${ALIGNED_CHECK}));
    meta->set_opt("BLAST_PLUS", bool(${BLAST_PLUS}));
    meta->set_opt("BLAST_EVALUE", double(${BLAST_EVALUE}));
    meta->set_opt("BLAST_DUST", bool(${BLAST_DUST}));
    meta->set_opt("CONFIG0", std::string("${CONFIG0}"));
    meta->set_opt("CONFIG1", std::string("${CONFIG1}"));
    meta->set_opt("CONFIG2", std::string("${CONFIG2}"));
    meta->set_opt("CONFIG3", std::string("${CONFIG3}"));
    meta->set_opt("CONFIG4", std::string("${CONFIG4}"));
    meta->set_opt("CONFIG5", std::string("${CONFIG5}"));
    meta->set_opt("CONFIG6", std::string("${CONFIG6}"));
    meta->set_opt("CONFIG7", std::string("${CONFIG7}"));
    meta->set_opt("CONFIG8", std::string("${CONFIG8}"));
    meta->set_opt("CONFIG9", std::string("${CONFIG9}"));
    meta->set_opt("LOCAL_CONF", std::string("${LOCAL_CONF}"));
}

}

